"""about project:
requires: django version 1.11.29,fdb,django-firebird
"""


%%% scrapy_train\Scripts\activate.bat

%%% python -m django --version

########## create project and app  01##############

%%% django-admin startproject mysite

%%% python manage.py startapp polls

##########################################

########## run server  01 ##############
%%% python manage.py runserver

%%% python manage.py runserver 0.0.0.0:8000

############################################

########## migrates 02 ###############
%%% python manage.py migrate

The migrate command looks at the
INSTALLED_APPS setting and creates any necessary
database tables according to the database settings
#################################################

########## create models 02 #######################
Each model is represented by a class that subclasses django.db.models.Model
like this:
%%%%
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

    def __str__(self):
        return self.question_text
%%%%
It’s important to add __str__() methods to your models,
not only for your own convenience when dealing with the interactive prompt,
but also because objects’ representations are used throughout Django’s automatically-generated admin.

befor migrate this the model to database you need
to tell your project that the polls app is installed:
so add this to your settings.INSTALLED_APPS:
%%%% 'polls.apps.PollsConfig' %%%%%%

now create sql:
>>> python manage.py makemigrations polls

to see sql codes use this:
>>> python manage.py sqlmigrate polls 0001

now run this to make migrations:
>>> python manage.py sqlmigrate polls 0001

now run:
>>> python manage.py migrate
################################################

##########using shell  02 #######################
python manage.py shell
>>>
import django
django.setup()
from search_in_database.models import *
<<<
>>> Question.objects.all()

this code shows the query sql code:
%% str(pubs.query)
###########################################

########## admin  02 #########################
>>> python manage.py createsuperuser
in polls/admin.py write:
%%%%%%%
from django.contrib import admin
from .models import Question
admin.site.register(Question)
%%%%%%%%%%
###########################################

########## templates  03 #####################
create a template in path: "polls/templates/polls/index.html"
and then in your view render the html template.
for example:
%%%%%  render(request, 'polls/detail.html', {
        'question': question,
        'error_message': "You didn't select a choice.",
    })  %%%%%%%%%
then add this to your settings.INSTALLED_APPS:
%%%% 'polls.apps.PollsConfig' %%%%%%

######### hard coded urls:
if you have a <a> thag and want to set "href" for it, it's
better to use some thing like:
first add this line to polls.urls:
%%% app_name = 'polls' %%%%
then:
%%%  href="{% polls:url 'results' 77 %}"  %%%
it goes to polls.urls and find url whit name 'rsults' and
replace (?P<question_id>[0-9]+) with 77 and make a url.
so the href is some thing like:
http://localhost:8000/polls/77/results/
############################################

############ form 04 ############################
1.use post methods when the form changes database
2. use {% csrf_token %} in form for protection

%%%request.POST['choice']%%% gets you the value of the
input with name 'choice'.

url of post should be processed in views and the view function
should return HttpResponse(HttpResponseRedirect) like this:
%%%%return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))%%%%

"Avoiding race conditions using F()" did not read.
##################################################

############## test django 05 ########################
i did not read it;
######################################################

############## stylesheet 06 #########################
like template create a directory static/polls and add your
css files to this then in your template add some code like this:
%%%
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}" />
%%%
#####################################################################

########### changing admin 07 ###################################
i did'nt read it.
##################################################################

########### problem on creating model && (fields.E304) Reverse accessor clash  ################################################
ref: https://www.reddit.com/r/django/comments/76a7uw/related_name_in_modelspy/
Let's say you have a model named Book and a model named Category.
Each book has one and only one category, denoted by a foreign key.
Thus, you'll have the following models:

class Category(models.Model):
  name = models.CharField(max_length=128)

class Book(models.Model):
  name = models.CharField(max_length=128)
  category = models.ForeignKey('Category')
Now, when you have a Book instance you can refer to its category using the corresponding field.
Furthermore, if you have a category instance, by default, django adds an attribute to it named
book_set which returns a queryset with all the books that have this specific category. So you can do something like:

%%%%%%%%%%
category = Category.objects.get(pk=1)
print "Books in category {0}".format(category.name)
for book in category.book_set.all():
  print book.name
%%%%%%%%%%%%%

Now, book_set is an attribute that django constructed for us and gave it this name by default.
Using the related_name attribute of foreign key you can give this attribute whatever name you want
(for example if I had definited category as this category = models.ForeignKey('Category', related_name='book_collection')
then instead of category.book_set.all() I'd use category.book_collection.all()).

In any case, you rarely need to change the related_name,
if at all in usual case (I don't recommend it because it's easy to remember the django default x_set).
However there's a use case where it is required: When you have multiple foreign keys from a model to another.
In this case there would be a clash (since django would try to create two x_set attributes to the same model)
and you need to help by naming the x_set attributes yourself.

For example, if my Book model was like this (had a category and a subcategory):

%%%%%%%%%%%%%
class Book(models.Model):
  name = models.CharField(max_length=128)
  category = models.ForeignKey('Category')
  sub_category = models.ForeignKey('Category')
%%%%%%%%%%%%%

then the model would not validate unless you give one (or both) of the ForeignKeys a
related_name attribute so that the clash will be resolved. For example you could do something like this:

%%%%%%%%%%%%%%
class Book(models.Model):
 name = models.CharField(max_length=128)
  category = models.ForeignKey('Category', related_name='book_category_set')
  sub_category = models.ForeignKey('Category', related_name='book_sub_category_set')
%%%%%%%%%%%%%

##############################################################################################################

############# django template language ########################################
Variables look like this: {{ variable }}

when the template system encounters a dot({{variable.something}}), it tries the following lookups, in this order:
Dictionary lookup
Attribute or method lookup
Numeric index lookup
If the resulting value is callable, it is called with no arguments.

Filters look like this: {{ name|lower }}. lower filter convert name to lower case.

Tags look like this: {% tag %}. Tags are more complex than variables: Some create text in the output,
some control flow by performing loops or logic,
and some load external information into the template to be used by later variables.

Template inheritance¶
read the link:
https://docs.djangoproject.com/en/3.1/ref/templates/language/#template-inheritance
#################################################################################################################################

########## Automatic HTML escaping ###############################################################################################
%%% Hello, {{ name }}   ===>  %%% Hello, <script>alert('hello')</script>
Clearly, user-submitted data shouldn’t be trusted blindly and inserted directly into your Web pages,
because a malicious user could use this kind of hole to do potentially bad things.
This type of security exploit is called a Cross Site Scripting (XSS) attack.

By default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:

< is converted to &lt;
> is converted to &gt;
' (single quote) is converted to &#x27;
" (double quote) is converted to &quot;
& is converted to &amp;
Again, we stress that this behavior is on by default. If you’re using Django’s template system, you’re protected.

How to turn it off:
Why would you want to turn it off? Because sometimes,
template variables contain data that you intend to be rendered as raw HTML,
For example, you might store a blob of HTML in your database and want to embed that directly into your template

This will be escaped: {{ data }}
This will not be escaped: {{ data|safe }}

or
{% autoescape off %}
    Hello {{ name }}
{% endautoescape %}

####################################################################################################################

################### work with static files (css , javascript ,images) ############################
collectstatic:

>>> django-admin collectstatic

Collects the static files into STATIC_ROOT(default: www.example.com/statics).
(if you are in development phase of project don't need to run this command
and after runserver command, 'django.contrib.staticfiles' in your installed
apps(in setting) do it automatically. but in production phase you should
use this command.)


Files are searched by using the enabled finders.
The default is to look in all locations defined in STATICFILES_DIRS
and in the 'static' directory of apps specified by the INSTALLED_APPS setting.

#######################################################################################################

########### debuging & use pdb #########################################
ref = https://realpython.com/python-debugging-pdb/
%%%%%
import pdb; pdb.set_trace()
breakpoint()
p 'print'
n 'next_line'
c 'continue'
s 'step forward'
pp 'pretty print'
pp object.__dict__ 'print all properties and values'
locals()
globals()
w find function callers
